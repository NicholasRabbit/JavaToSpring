源码：src/com/javase/project/entity/User.java
类文件：build/com/javase/project/entity/User.class
===============
生成可运行的jar包
1, 编译，在project目录下执行，把编译后的User.class放到build目录下，即上面类文件的全路径
javac -encoding utf-8 -d build src/com/javase/project/entity/User.java
运行:
..project/build/-->: java com.javase.project.User

2,打jar包，jar包里有META-INF配置目录
jar cvf project.jar * 
测试输出,后面加全路径名，指定Main类：
java -cp project.jar com.javase.project.entity.User  

3,生成可以运行的jar包，许要指定应用程序入口点
命令： jar cvfe project.jar com.javase.project.entity.User *
指定了Main类后，jar包里面的 META-INF/MANIFEST.MF,比原来多了一行
Main-Class: com.javase.project.entity.User

=====================
模拟web项目编译
User可换做UserController.java
1,以log4j.jar为例，测试加载外部jar包，跟项目中类似
  lib目录放到project根目录下
javac -encoding utf-8 src/com/javase/project/entity/User.java -sourcepath src -d build -g -classpath ./lib/*.jar
解释：-classpath ./lib/*.jar  : 是引入外部jar的路径，星号也可写具体名字
2,把log4j.xml配置文件放到src根目录下
3,运行：在build目录下，不同的引用的class文件中间用分号隔开
..project/build/-->: java -classpath ../lib/log4j.jar;../build com.javase.project.entity.User


